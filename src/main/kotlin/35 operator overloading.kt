/*
    # 연산자 동작 원리
    - 자바에서는 +, -, ... 등의 연산을 수행하여 결과를 전달한다.
    - 코틀린에서는 모든 값을 객체로 만들어 관리하기 때문에
      코드에 정수를 작성하면 정수로 관리하지 않고 정수 값을 관리하는 객체를 생성하여 객체로 관리하게 된다.
    - 따라서 더하기 연산 자체가 일반적인 연산 방식으로 동작하지 못한다. (객체와 객체를 더할 수 없음)
    - 코틀린에서는 객체와 객체를 연산자를 통해 연산을 하게 되면 객체 내 메서드를 호출한다.
    - 호출한 메서드의 객체를 반환 받아 이를 연산의 결과로 사용하게 된다.
*/

fun main() {
    val num1 = 100
    val num2 = 200

    var a1 = 100 + 200
    var a2 = num1 + num2
    var a3 = num1.plus(num2)

    /*******************************************************/

    val obj1 = C35_1(100, 200)
    val obj2 = C35_1(1000, 2000)
    val obj3 = obj1 + obj2 // 객체 끼리 더한다? -> 연산자 오버라이딩 필요
}

class C35_1(var a1: Int, var a2: Int) {
    operator fun plus(target:C35_1) : C35_1 {
        var r1 = this.a1 + target.a1
        var r2 = this.a2 + target.a2
        val result = C35_1(r1, r2)
        return result
    }
}