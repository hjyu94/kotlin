/*
    # 고차 함수
    - 함수를 매개변수로 받거나 반환 타입이 함수인 함수를 고차 함수라고 부른다
    - 함수 호출 시 전달하는 함수와 반환 하는 함수는 람다식을 사용할 수도 있다.
 */

/**********************************************************/

// 고차함수 예 - 매개변수로 함수를 받는 함수
fun fun41_1(m1: (Int, Int) -> Int, a1: Int, a2: Int): Int {
    return m1(a1, a2)
}
fun test_fun41_1() {
    // 사용법 1
    val t1 = fun(x1: Int, x2: Int): Int {
        return x1 + x2
    }
    fun41_1(t1, 10, 20)

    // 사용법 2
    fun41_1(fun(x1: Int, x2: Int): Int {
        return x1 - x2
    }, 100, 200)

    // 사용법 3
    val lambda = { x1: Int, x2: Int -> x1 * x2 }
    fun41_1(lambda, 100, 200)

    // 사용법 4
    fun41_1({ x1: Int, x2: Int -> x1 / x2 }, 100, 200)
}

/**********************************************************/

// 고차함수 예 - 반환 타입이 함수인 함수
fun fun41_2(): (Int, Int) -> Int {
    return fun(x1: Int, x2: Int): Int {
        return x1 + x2
    }
}
fun test_fun41_2() {
    val t1 = fun41_2()
    val r2 = t1(100, 200)
}

/**********************************************************/

// 고차함수 예 - 반환 타입이 람다식인 함수
fun fun41_3(): (Int, Int) -> Int {
    return { x1: Int, x2: Int ->
        x1 - x2
    }
}
fun test_fun41_3() {
    val t1 = fun41_3()
    val rv = t1(100, 200)

    // ==
    val rv2 = fun41_3()(100, 200)
}

/**********************************************************/

// 편해지는 예: 매개변수가 1개인 경우면 it 으로 대체 가능
fun fun41_4(m1: (Int) -> Int, a1: Int) {
    val rv = m1(a1)
    println("rv: $rv")
}
fun test_fun41_4() {
    fun41_4({x1: Int -> x1 + 100}, 200)
    fun41_4({it + 100}, 200)
}

/**********************************************************/

// 편해지는 예: 마지막 매개변수로 람다식을 받는 경우 고차함수의 호출 부 ) 뒤에 써줘도 된다
// (그래서 보통 함수에서 매개변수로 람다식을 받는다면 마지막 매개변수로 정의하는게 관습적이다.)
fun fun41_5(a1: Int, a2: Int, m1: (Int, Int) -> Int) {
    val rv = m1(a1, a2)
    println("rv: $rv")
}
fun test_fun41_5() {
    fun41_5(100, 200){x1: Int, x2: Int -> x1 + x2}
}

/**********************************************************/

// 자주 못 봤던 형태 - 함수에서 매개변수로 람다식만을 받는 경우
fun test41_6(m1: (Int) -> Unit) {
    m1(100)
}
fun test_fun41_6() {
    test41_6 { x1:Int -> println(x1) }
    test41_6 { println(it) }
}